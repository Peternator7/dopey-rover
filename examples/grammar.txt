
// Here's all the expressions in the world.

top_level_expression :=
    boolean_expression
    block_like_expression

block_like_expression :=
    if_else_expression
    match_expression
    if_let_else_expression
    block_expression

block_expression :=
    '{' top_level_expression '}'

if_else_expression :=
    'if' top_level_expression block_expression 'else' block_expression

boolean_expression :=
    test_expression '&&' boolean_expression
    test_expression '||' boolean_expression
    test_expression '&&' 'return' test_expression
    test_expression '||' 'return' test_expression
    test_expression '&&' 'return'
    test_expression '||' 'return'
    test_expression

test_expression :=
    comparison_expression 'is' comparison_expression
    comparison_expression

comparison_expression :=
    arithmatic_expression '<' arithmatic_expression
    arithmatic_expression '<=' arithmatic_expression
    arithmatic_expression '>' arithmatic_expression
    arithmatic_expression '>=' arithmatic_expression
    arithmatic_expression '!=' arithmatic_expression
    arithmatic_expression '==' arithmatic_expression
    arithmatic_expression

arithmatic_expression :=
    arithmatic_term '+' arithmatic_expression
    arithmatic_term '-' arithmatic_expression

arithmatic_term :=
    arithmatic_factor '*' arithmatic_term
    arithmatic_factor '/' arithmatic_term
    arithmatic_factor '%' arithmatic_term
    arithmatic_factor

arithmatic_factor :=
    call_expression

call_expression :=
    call_lhs_expression+

call_lhs_expression :=
    head_expression

head_expression :=
    object_lookup_expression :: head_expression
    object_lookup_expression

object_lookup_expression :=
    basic_expression (object_lookup_accessors)?

object_lookup_accessors
    '.' ident (object_lookup_accessors)?

basic_expression :=
    string_literal
    number_literal
    array_literal_expression
    new_object_expression
    new_trait_object_expression
    get_expression
    ident
    '(' top_level_expression ')'

get_expression :=
    '@get' '(' trait_name ',' object_lookup_expression ')'

set_statement :=
    ident '=' '@set' '(' trait_object ',' object_lookup_expression ')' ';'

new_object_expr :=
    'new' '{'
        (prototype-list 'with')?
        object-properties
        (','' '..' object_lookup_expression)?
    '}'

prototype_list :=
    object_lookup_expression+
    object_lookup_expression* '..' object_lookup_expression

new_trait_object_expr :=
    'new' object_lookup_expression '{' function_declaration* '}'

object-properties :=
    ident ':' top_level_expression

// Patterns

top_level_pattern :=
    head_pattern

head_pattern :=
    basic_pattern :: head_pattern
    basic_pattern

basic_pattern :=
    test_pattern
    literal_pattern
    object_pattern
    list_pattern
    identifier_pattern

object_pattern :=
    '{' property_destructuring '}'

list_pattern :=
    '[' (top_level_pattern)* ']'

head_pattern :=
    top_level_pattern :: head_pattern

identifier_pattern :=
    ident

literal_pattern :=
    String
    Number

test_pattern :=
    '?' object_lookup_expression (assignable_pattern)?

// Statements

statement :=
    // Functions can be declared locally, but not traits.
    function_declaration
    'try' top_level_expression
    object_declaration

// Top Level Items

import :=
    'import' ident ('.' ident)* ';'

function_declaration :=
    ident ident+ '=' top_level_expression ';'
    ident ident+ '=' block_like_expression

object_declaration :=
    // Block like expressions don't need a trailing semi-colon
    ident '=' block_like_expression
    ident '=' top_level_expression ';'

trait_declaration :=
    ident '=' 'trait' '{' '}'
